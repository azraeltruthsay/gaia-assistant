import os
import ast
import argparse

def generate_function_reference(app_dir, output_file):
    """
    Parses all Python files in the app directory to extract class and function names,
    and writes them to a Markdown file.
    """
    reference = {}

    for root, _, files in os.walk(app_dir):
        for file in files:
            if file.endswith(".py"):
                file_path = os.path.join(root, file)
                relative_path = os.path.relpath(file_path, app_dir)
                
                with open(file_path, "r", encoding="utf-8") as f:
                    try:
                        tree = ast.parse(f.read(), filename=file_path)
                        class_defs = [node.name for node in ast.walk(tree) if isinstance(node, ast.ClassDef) and not node.name.startswith('_')]
                        func_defs = [node.name for node in ast.walk(tree) if isinstance(node, ast.FunctionDef) and not node.name.startswith('_')]

                        if class_defs or func_defs:
                            reference[relative_path] = {
                                "classes": sorted(class_defs),
                                "functions": sorted(func_defs)
                            }
                    except Exception as e:
                        print(f"Error parsing {file_path}: {e}")

    with open(output_file, "w", encoding="utf-8") as f:
        f.write("# GAIA Function Reference\n\n")
        f.write("This document is auto-generated by `app/utils/generate_function_reference.py`.\n")
        f.write("It lists all classes and functions found within the `app` directory.\n\n")

        for path, details in sorted(reference.items()):
            f.write(f"## `app/{path}`\n\n")
            if details["classes"]:
                f.write("### Classes\n\n")
                for class_name in details["classes"]:
                    f.write(f"- `{class_name}`\n")
                f.write("\n")
            
            if details["functions"]:
                f.write("### Functions\n\n")
                for func_name in details["functions"]:
                    f.write(f"- `{func_name}`\n")
                f.write("\n")

    print(f"Function reference generated at {output_file}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate a function reference for the GAIA application.")
    parser.add_argument(
        "--app_dir",
        default="app",
        help="The path to the 'app' directory."
    )
    parser.add_argument(
        "--output_file",
        default="knowledge/system_reference/functions_reference.md",
        help="The path to the output Markdown file."
    )
    args = parser.parse_args()
    
    # Adjust paths to be relative to the project root
        # Adjust paths to be relative to the project root
    # Correctly identify the project root, which is two levels up from this script's directory
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
    
    app_directory = os.path.join(project_root, args.app_dir)
    output_file_path = os.path.join(project_root, args.output_file)

    # Ensure the output directory exists before writing the file
    output_dir = os.path.dirname(output_file_path)
    os.makedirs(output_dir, exist_ok=True)

    generate_function_reference(app_directory, output_file_path)
